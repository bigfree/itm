type Authorize {
  """JWT Token"""
  accessToken: JWT!

  """JWT Token"""
  refreshToken: JWT!
  user: User!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input EnumLogFromNullableFilter {
  equals: LogFrom
  in: [LogFrom!]
  not: NestedEnumLogFromNullableFilter
  notIn: [LogFrom!]
}

input EnumLogTypeFilter {
  equals: LogType
  in: [LogType!]
  not: NestedEnumLogTypeFilter
  notIn: [LogType!]
}

input EnumThemeColorNullableFilter {
  equals: ThemeColor
  in: [ThemeColor!]
  not: NestedEnumThemeColorNullableFilter
  notIn: [ThemeColor!]
}

input EnumTransportTypeFieldUpdateOperationsInput {
  set: TransportType
}

input EnumTransportTypeFilter {
  equals: TransportType
  in: [TransportType!]
  not: NestedEnumTransportTypeFilter
  notIn: [TransportType!]
}

input EnumUserRoleNullableListFilter {
  equals: [UserRole!]
  has: UserRole
  hasEvery: [UserRole!]
  hasSome: [UserRole!]
  isEmpty: Boolean
}

input EnumUserTypeFieldUpdateOperationsInput {
  set: UserType
}

input EnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  not: NestedEnumUserTypeFilter
  notIn: [UserType!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input JsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Log {
  createdAt: DateTime
  data: JSON
  from: LogFrom
  id: String!
  type: LogType!
}

type LogCountAggregate {
  _all: Int!
  createdAt: Int!
  data: Int!
  from: Int!
  id: Int!
  type: Int!
}

input LogCreateInput {
  createdAt: DateTime
  data: JSON
  from: LogFrom
  type: LogType
}

enum LogFrom {
  API
  APP
}

type LogMaxAggregate {
  createdAt: DateTime
  from: LogFrom
  id: String
  type: LogType
}

type LogMinAggregate {
  createdAt: DateTime
  from: LogFrom
  id: String
  type: LogType
}

enum LogOrderByRelevanceFieldEnum {
  id
}

input LogOrderByRelevanceInput {
  fields: [LogOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input LogOrderByWithRelationInput {
  _relevance: LogOrderByRelevanceInput
  createdAt: SortOrderInput
  data: SortOrderInput
  from: SortOrderInput
  id: SortOrder
  type: SortOrder
}

enum LogScalarFieldEnum {
  createdAt
  data
  from
  id
  type
}

enum LogType {
  DEBUG
  ERROR
  LOG
  VERBOSE
  WARN
}

input LogWhereInput {
  AND: [LogWhereInput!]
  NOT: [LogWhereInput!]
  OR: [LogWhereInput!]
  createdAt: DateTimeNullableFilter
  data: JsonNullableFilter
  from: EnumLogFromNullableFilter
  id: StringFilter
  type: EnumLogTypeFilter
}

input LogWhereUniqueInput {
  AND: [LogWhereInput!]
  NOT: [LogWhereInput!]
  OR: [LogWhereInput!]
  createdAt: DateTimeNullableFilter
  data: JsonNullableFilter
  from: EnumLogFromNullableFilter
  id: String
  type: EnumLogTypeFilter
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createLog(data: LogCreateInput): Log!
  createMyConfig(userConfigCreateInput: UserConfigCreateInput!): UserConfig!
  createTransportCollection(data: TransportCollectionCreateInput!): TransportCollection!
  createUser(data: UserCreateInput!): User!
  createUserConfig(data: UserConfigCreateInput!): UserConfig!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(loginInput: LoginInput!): Authorize!
  logout: User!
  refreshTokens(refreshInput: RefreshInput!): Authorize!
  register(registerInput: RegisterInput!): Authorize!
  updateMyConfig(userConfigUpdateInput: UserConfigUpdateInput!): UserConfig!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateUserConfig(data: UserConfigUpdateInput!, where: UserConfigWhereUniqueInput!): UserConfig!
  upsertUserConfig(create: UserConfigCreateInput!, update: UserConfigUpdateInput!, where: UserConfigWhereUniqueInput!): UserConfig!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumLogFromNullableFilter {
  equals: LogFrom
  in: [LogFrom!]
  not: NestedEnumLogFromNullableFilter
  notIn: [LogFrom!]
}

input NestedEnumLogTypeFilter {
  equals: LogType
  in: [LogType!]
  not: NestedEnumLogTypeFilter
  notIn: [LogType!]
}

input NestedEnumThemeColorNullableFilter {
  equals: ThemeColor
  in: [ThemeColor!]
  not: NestedEnumThemeColorNullableFilter
  notIn: [ThemeColor!]
}

input NestedEnumTransportTypeFilter {
  equals: TransportType
  in: [TransportType!]
  not: NestedEnumTransportTypeFilter
  notIn: [TransportType!]
}

input NestedEnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  not: NestedEnumUserTypeFilter
  notIn: [UserType!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumThemeColorFieldUpdateOperationsInput {
  set: ThemeColor
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type PasswordCountAggregate {
  _all: Int!
  id: Int!
  password: Int!
}

input PasswordCreateNestedOneWithoutUserInput {
  connect: PasswordWhereUniqueInput
  connectOrCreate: PasswordCreateOrConnectWithoutUserInput
  create: PasswordCreateWithoutUserInput
}

input PasswordCreateOrConnectWithoutUserInput {
  create: PasswordCreateWithoutUserInput!
  where: PasswordWhereUniqueInput!
}

input PasswordCreateWithoutUserInput {
  password: String!
}

type PasswordMaxAggregate {
  id: String
  password: String
}

type PasswordMinAggregate {
  id: String
  password: String
}

enum PasswordOrderByRelevanceFieldEnum {
  id
  password
}

input PasswordOrderByRelevanceInput {
  fields: [PasswordOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input PasswordOrderByWithRelationInput {
  _relevance: PasswordOrderByRelevanceInput
  id: SortOrder
  password: SortOrder
  user: UserOrderByWithRelationInput
}

input PasswordUpdateOneRequiredWithoutUserNestedInput {
  connect: PasswordWhereUniqueInput
  connectOrCreate: PasswordCreateOrConnectWithoutUserInput
  create: PasswordCreateWithoutUserInput
  update: PasswordUpdateToOneWithWhereWithoutUserInput
  upsert: PasswordUpsertWithoutUserInput
}

input PasswordUpdateToOneWithWhereWithoutUserInput {
  data: PasswordUpdateWithoutUserInput!
  where: PasswordWhereInput
}

input PasswordUpdateWithoutUserInput {
  password: StringFieldUpdateOperationsInput
}

input PasswordUpsertWithoutUserInput {
  create: PasswordCreateWithoutUserInput!
  update: PasswordUpdateWithoutUserInput!
  where: PasswordWhereInput
}

input PasswordWhereInput {
  AND: [PasswordWhereInput!]
  NOT: [PasswordWhereInput!]
  OR: [PasswordWhereInput!]
  id: StringFilter
  password: StringFilter
  user: UserNullableRelationFilter
}

input PasswordWhereUniqueInput {
  AND: [PasswordWhereInput!]
  NOT: [PasswordWhereInput!]
  OR: [PasswordWhereInput!]
  id: String
  password: StringFilter
  user: UserNullableRelationFilter
}

type Profile {
  acronym: String
  avatar: String
  bio: String
  createdAt: DateTime
  firstName: String!
  id: String!
  lastName: String!
  user: User!
  userId: String!
  username: String
}

type ProfileCountAggregate {
  _all: Int!
  acronym: Int!
  avatar: Int!
  bio: Int!
  createdAt: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  userId: Int!
  username: Int!
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  acronym: String
  avatar: String
  bio: String
  createdAt: DateTime
  firstName: String!
  lastName: String!
  username: String
}

input ProfileFullnameCompoundUniqueInput {
  firstName: String!
  lastName: String!
}

type ProfileMaxAggregate {
  acronym: String
  avatar: String
  bio: String
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  userId: String
  username: String
}

type ProfileMinAggregate {
  acronym: String
  avatar: String
  bio: String
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  userId: String
  username: String
}

input ProfileNullableRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileOrderByRelevanceFieldEnum {
  acronym
  avatar
  bio
  firstName
  id
  lastName
  userId
  username
}

input ProfileOrderByRelevanceInput {
  fields: [ProfileOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ProfileOrderByWithRelationInput {
  _relevance: ProfileOrderByRelevanceInput
  acronym: SortOrderInput
  avatar: SortOrderInput
  bio: SortOrderInput
  createdAt: SortOrderInput
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  username: SortOrderInput
}

input ProfileUpdateOneWithoutUserNestedInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
  delete: ProfileWhereInput
  disconnect: ProfileWhereInput
  update: ProfileUpdateToOneWithWhereWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateToOneWithWhereWithoutUserInput {
  data: ProfileUpdateWithoutUserInput!
  where: ProfileWhereInput
}

input ProfileUpdateWithoutUserInput {
  acronym: NullableStringFieldUpdateOperationsInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
  where: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  acronym: StringNullableFilter
  avatar: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeNullableFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  user: UserRelationFilter
  userId: StringFilter
  username: StringNullableFilter
}

input ProfileWhereUniqueInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  acronym: StringNullableFilter
  avatar: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeNullableFilter
  firstName: StringFilter
  fullname: ProfileFullnameCompoundUniqueInput
  id: String
  lastName: StringFilter
  user: UserRelationFilter
  userId: String
  username: String
}

type Query {
  log(where: LogWhereUniqueInput!): Log!
  logs(cursor: LogWhereUniqueInput, distinct: [LogScalarFieldEnum!], orderBy: [LogOrderByWithRelationInput!], skip: Int, take: Int, where: LogWhereInput): [Log!]!
  me: User!
  myConfig: UserConfig!
  transportCollections(cursor: TransportCollectionWhereUniqueInput, distinct: [TransportCollectionScalarFieldEnum!], orderBy: [TransportCollectionOrderByWithRelationInput!], skip: Int, take: Int, where: TransportCollectionWhereInput): [TransportCollection!]!
  user(where: UserWhereUniqueInput!): User!
  userConfig(where: UserConfigWhereUniqueInput!): UserConfig!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type QueueAvgAggregate {
  attempt: Float
  jobId: Float
}

type QueueCountAggregate {
  _all: Int!
  attempt: Int!
  enqueueAt: Int!
  failedReason: Int!
  finishedAt: Int!
  id: Int!
  jobId: Int!
  message: Int!
  status: Int!
}

type QueueMaxAggregate {
  attempt: Int
  enqueueAt: DateTime
  failedReason: String
  finishedAt: DateTime
  id: String
  jobId: Int
  status: String
}

type QueueMinAggregate {
  attempt: Int
  enqueueAt: DateTime
  failedReason: String
  finishedAt: DateTime
  id: String
  jobId: Int
  status: String
}

type QueueSumAggregate {
  attempt: Int
  jobId: Int
}

input RefreshInput {
  """Refresh token"""
  refreshToken: String!
}

type RefreshTokenCountAggregate {
  _all: Int!
  expiresAt: Int!
  id: Int!
  isRevoked: Int!
  userId: Int!
}

type RefreshTokenMaxAggregate {
  expiresAt: DateTime
  id: String
  isRevoked: Boolean
  userId: String
}

type RefreshTokenMinAggregate {
  expiresAt: DateTime
  id: String
  isRevoked: Boolean
  userId: String
}

input RegisterInput {
  """User unique email address"""
  email: String!

  """User password"""
  password: String!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Subscription {
  logCreated: Log!
  transportCollectionCreated: User!
  userCreated: User!
  userDeleted: User!
  userLogout: User!
  userUpdated: User!
}

enum ThemeColor {
  AUTO
  DARK
  LIGHT
}

type Transport {
  archiveAt: DateTime
  createdAt: DateTime
  createdUser: User!
  createdUserId: String!
  deletedAt: DateTime
  description: String
  id: String!
  isAllow: Boolean!
  method: TransportType!
  name: String!
  transportCollection: TransportCollection
  transportCollectionId: String
  url: String!
}

type TransportCollection {
  Transport: [Transport!]
  _count: TransportCollectionCount!
  archiveAt: DateTime
  createdAt: DateTime
  createdUser: User!
  createdUserId: String!
  deletedAt: DateTime
  id: String!
  name: String!
}

type TransportCollectionCount {
  Transport: Int!
}

type TransportCollectionCountAggregate {
  _all: Int!
  archiveAt: Int!
  createdAt: Int!
  createdUserId: Int!
  deletedAt: Int!
  id: Int!
  name: Int!
}

input TransportCollectionCreateInput {
  Transport: TransportCreateNestedManyWithoutTransportCollectionInput
  archiveAt: DateTime
  createdAt: DateTime
  createdUser: UserCreateNestedOneWithoutTransportsCollectionInput!
  deletedAt: DateTime
  name: String!
}

input TransportCollectionCreateManyCreatedUserInput {
  archiveAt: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  name: String!
}

input TransportCollectionCreateManyCreatedUserInputEnvelope {
  data: [TransportCollectionCreateManyCreatedUserInput!]!
  skipDuplicates: Boolean
}

input TransportCollectionCreateNestedManyWithoutCreatedUserInput {
  connect: [TransportCollectionWhereUniqueInput!]
  connectOrCreate: [TransportCollectionCreateOrConnectWithoutCreatedUserInput!]
  create: [TransportCollectionCreateWithoutCreatedUserInput!]
  createMany: TransportCollectionCreateManyCreatedUserInputEnvelope
}

input TransportCollectionCreateNestedOneWithoutTransportInput {
  connect: TransportCollectionWhereUniqueInput
  connectOrCreate: TransportCollectionCreateOrConnectWithoutTransportInput
  create: TransportCollectionCreateWithoutTransportInput
}

input TransportCollectionCreateOrConnectWithoutCreatedUserInput {
  create: TransportCollectionCreateWithoutCreatedUserInput!
  where: TransportCollectionWhereUniqueInput!
}

input TransportCollectionCreateOrConnectWithoutTransportInput {
  create: TransportCollectionCreateWithoutTransportInput!
  where: TransportCollectionWhereUniqueInput!
}

input TransportCollectionCreateWithoutCreatedUserInput {
  Transport: TransportCreateNestedManyWithoutTransportCollectionInput
  archiveAt: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  name: String!
}

input TransportCollectionCreateWithoutTransportInput {
  archiveAt: DateTime
  createdAt: DateTime
  createdUser: UserCreateNestedOneWithoutTransportsCollectionInput!
  deletedAt: DateTime
  name: String!
}

input TransportCollectionListRelationFilter {
  every: TransportCollectionWhereInput
  none: TransportCollectionWhereInput
  some: TransportCollectionWhereInput
}

type TransportCollectionMaxAggregate {
  archiveAt: DateTime
  createdAt: DateTime
  createdUserId: String
  deletedAt: DateTime
  id: String
  name: String
}

type TransportCollectionMinAggregate {
  archiveAt: DateTime
  createdAt: DateTime
  createdUserId: String
  deletedAt: DateTime
  id: String
  name: String
}

input TransportCollectionNullableRelationFilter {
  is: TransportCollectionWhereInput
  isNot: TransportCollectionWhereInput
}

input TransportCollectionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum TransportCollectionOrderByRelevanceFieldEnum {
  createdUserId
  id
  name
}

input TransportCollectionOrderByRelevanceInput {
  fields: [TransportCollectionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input TransportCollectionOrderByWithRelationInput {
  Transport: TransportOrderByRelationAggregateInput
  _relevance: TransportCollectionOrderByRelevanceInput
  archiveAt: SortOrderInput
  createdAt: SortOrderInput
  createdUser: UserOrderByWithRelationInput
  createdUserId: SortOrder
  deletedAt: SortOrderInput
  id: SortOrder
  name: SortOrder
}

enum TransportCollectionScalarFieldEnum {
  archiveAt
  createdAt
  createdUserId
  deletedAt
  id
  name
}

input TransportCollectionScalarWhereInput {
  AND: [TransportCollectionScalarWhereInput!]
  NOT: [TransportCollectionScalarWhereInput!]
  OR: [TransportCollectionScalarWhereInput!]
  archiveAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  createdUserId: StringFilter
  deletedAt: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
}

input TransportCollectionUpdateManyMutationInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TransportCollectionUpdateManyWithWhereWithoutCreatedUserInput {
  data: TransportCollectionUpdateManyMutationInput!
  where: TransportCollectionScalarWhereInput!
}

input TransportCollectionUpdateManyWithoutCreatedUserNestedInput {
  connect: [TransportCollectionWhereUniqueInput!]
  connectOrCreate: [TransportCollectionCreateOrConnectWithoutCreatedUserInput!]
  create: [TransportCollectionCreateWithoutCreatedUserInput!]
  createMany: TransportCollectionCreateManyCreatedUserInputEnvelope
  delete: [TransportCollectionWhereUniqueInput!]
  deleteMany: [TransportCollectionScalarWhereInput!]
  disconnect: [TransportCollectionWhereUniqueInput!]
  set: [TransportCollectionWhereUniqueInput!]
  update: [TransportCollectionUpdateWithWhereUniqueWithoutCreatedUserInput!]
  updateMany: [TransportCollectionUpdateManyWithWhereWithoutCreatedUserInput!]
  upsert: [TransportCollectionUpsertWithWhereUniqueWithoutCreatedUserInput!]
}

input TransportCollectionUpdateOneWithoutTransportNestedInput {
  connect: TransportCollectionWhereUniqueInput
  connectOrCreate: TransportCollectionCreateOrConnectWithoutTransportInput
  create: TransportCollectionCreateWithoutTransportInput
  delete: TransportCollectionWhereInput
  disconnect: TransportCollectionWhereInput
  update: TransportCollectionUpdateToOneWithWhereWithoutTransportInput
  upsert: TransportCollectionUpsertWithoutTransportInput
}

input TransportCollectionUpdateToOneWithWhereWithoutTransportInput {
  data: TransportCollectionUpdateWithoutTransportInput!
  where: TransportCollectionWhereInput
}

input TransportCollectionUpdateWithWhereUniqueWithoutCreatedUserInput {
  data: TransportCollectionUpdateWithoutCreatedUserInput!
  where: TransportCollectionWhereUniqueInput!
}

input TransportCollectionUpdateWithoutCreatedUserInput {
  Transport: TransportUpdateManyWithoutTransportCollectionNestedInput
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TransportCollectionUpdateWithoutTransportInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdUser: UserUpdateOneRequiredWithoutTransportsCollectionNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TransportCollectionUpsertWithWhereUniqueWithoutCreatedUserInput {
  create: TransportCollectionCreateWithoutCreatedUserInput!
  update: TransportCollectionUpdateWithoutCreatedUserInput!
  where: TransportCollectionWhereUniqueInput!
}

input TransportCollectionUpsertWithoutTransportInput {
  create: TransportCollectionCreateWithoutTransportInput!
  update: TransportCollectionUpdateWithoutTransportInput!
  where: TransportCollectionWhereInput
}

input TransportCollectionWhereInput {
  AND: [TransportCollectionWhereInput!]
  NOT: [TransportCollectionWhereInput!]
  OR: [TransportCollectionWhereInput!]
  Transport: TransportListRelationFilter
  archiveAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  createdUser: UserRelationFilter
  createdUserId: StringFilter
  deletedAt: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
}

input TransportCollectionWhereUniqueInput {
  AND: [TransportCollectionWhereInput!]
  NOT: [TransportCollectionWhereInput!]
  OR: [TransportCollectionWhereInput!]
  Transport: TransportListRelationFilter
  archiveAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  createdUser: UserRelationFilter
  createdUserId: StringFilter
  deletedAt: DateTimeNullableFilter
  id: String
  name: StringFilter
}

type TransportCountAggregate {
  _all: Int!
  archiveAt: Int!
  createdAt: Int!
  createdUserId: Int!
  deletedAt: Int!
  description: Int!
  id: Int!
  isAllow: Int!
  method: Int!
  name: Int!
  transportCollectionId: Int!
  url: Int!
}

input TransportCreateManyCreatedUserInput {
  archiveAt: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  isAllow: Boolean
  method: TransportType!
  name: String!
  transportCollectionId: String
  url: String!
}

input TransportCreateManyCreatedUserInputEnvelope {
  data: [TransportCreateManyCreatedUserInput!]!
  skipDuplicates: Boolean
}

input TransportCreateManyTransportCollectionInput {
  archiveAt: DateTime
  createdAt: DateTime
  createdUserId: String!
  deletedAt: DateTime
  description: String
  isAllow: Boolean
  method: TransportType!
  name: String!
  url: String!
}

input TransportCreateManyTransportCollectionInputEnvelope {
  data: [TransportCreateManyTransportCollectionInput!]!
  skipDuplicates: Boolean
}

input TransportCreateNestedManyWithoutCreatedUserInput {
  connect: [TransportWhereUniqueInput!]
  connectOrCreate: [TransportCreateOrConnectWithoutCreatedUserInput!]
  create: [TransportCreateWithoutCreatedUserInput!]
  createMany: TransportCreateManyCreatedUserInputEnvelope
}

input TransportCreateNestedManyWithoutTransportCollectionInput {
  connect: [TransportWhereUniqueInput!]
  connectOrCreate: [TransportCreateOrConnectWithoutTransportCollectionInput!]
  create: [TransportCreateWithoutTransportCollectionInput!]
  createMany: TransportCreateManyTransportCollectionInputEnvelope
}

input TransportCreateOrConnectWithoutCreatedUserInput {
  create: TransportCreateWithoutCreatedUserInput!
  where: TransportWhereUniqueInput!
}

input TransportCreateOrConnectWithoutTransportCollectionInput {
  create: TransportCreateWithoutTransportCollectionInput!
  where: TransportWhereUniqueInput!
}

input TransportCreateWithoutCreatedUserInput {
  archiveAt: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  isAllow: Boolean
  method: TransportType!
  name: String!
  transportCollection: TransportCollectionCreateNestedOneWithoutTransportInput
  url: String!
}

input TransportCreateWithoutTransportCollectionInput {
  archiveAt: DateTime
  createdAt: DateTime
  createdUser: UserCreateNestedOneWithoutTransportsInput!
  deletedAt: DateTime
  description: String
  isAllow: Boolean
  method: TransportType!
  name: String!
  url: String!
}

input TransportListRelationFilter {
  every: TransportWhereInput
  none: TransportWhereInput
  some: TransportWhereInput
}

type TransportMaxAggregate {
  archiveAt: DateTime
  createdAt: DateTime
  createdUserId: String
  deletedAt: DateTime
  description: String
  id: String
  isAllow: Boolean
  method: TransportType
  name: String
  transportCollectionId: String
  url: String
}

type TransportMinAggregate {
  archiveAt: DateTime
  createdAt: DateTime
  createdUserId: String
  deletedAt: DateTime
  description: String
  id: String
  isAllow: Boolean
  method: TransportType
  name: String
  transportCollectionId: String
  url: String
}

input TransportOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransportScalarWhereInput {
  AND: [TransportScalarWhereInput!]
  NOT: [TransportScalarWhereInput!]
  OR: [TransportScalarWhereInput!]
  archiveAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  createdUserId: StringFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  id: StringFilter
  isAllow: BoolFilter
  method: EnumTransportTypeFilter
  name: StringFilter
  transportCollectionId: StringNullableFilter
  url: StringFilter
}

enum TransportType {
  DELETE
  GET
  PATCH
  POST
  PUT
}

input TransportUpdateManyMutationInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isAllow: BoolFieldUpdateOperationsInput
  method: EnumTransportTypeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input TransportUpdateManyWithWhereWithoutCreatedUserInput {
  data: TransportUpdateManyMutationInput!
  where: TransportScalarWhereInput!
}

input TransportUpdateManyWithWhereWithoutTransportCollectionInput {
  data: TransportUpdateManyMutationInput!
  where: TransportScalarWhereInput!
}

input TransportUpdateManyWithoutCreatedUserNestedInput {
  connect: [TransportWhereUniqueInput!]
  connectOrCreate: [TransportCreateOrConnectWithoutCreatedUserInput!]
  create: [TransportCreateWithoutCreatedUserInput!]
  createMany: TransportCreateManyCreatedUserInputEnvelope
  delete: [TransportWhereUniqueInput!]
  deleteMany: [TransportScalarWhereInput!]
  disconnect: [TransportWhereUniqueInput!]
  set: [TransportWhereUniqueInput!]
  update: [TransportUpdateWithWhereUniqueWithoutCreatedUserInput!]
  updateMany: [TransportUpdateManyWithWhereWithoutCreatedUserInput!]
  upsert: [TransportUpsertWithWhereUniqueWithoutCreatedUserInput!]
}

input TransportUpdateManyWithoutTransportCollectionNestedInput {
  connect: [TransportWhereUniqueInput!]
  connectOrCreate: [TransportCreateOrConnectWithoutTransportCollectionInput!]
  create: [TransportCreateWithoutTransportCollectionInput!]
  createMany: TransportCreateManyTransportCollectionInputEnvelope
  delete: [TransportWhereUniqueInput!]
  deleteMany: [TransportScalarWhereInput!]
  disconnect: [TransportWhereUniqueInput!]
  set: [TransportWhereUniqueInput!]
  update: [TransportUpdateWithWhereUniqueWithoutTransportCollectionInput!]
  updateMany: [TransportUpdateManyWithWhereWithoutTransportCollectionInput!]
  upsert: [TransportUpsertWithWhereUniqueWithoutTransportCollectionInput!]
}

input TransportUpdateWithWhereUniqueWithoutCreatedUserInput {
  data: TransportUpdateWithoutCreatedUserInput!
  where: TransportWhereUniqueInput!
}

input TransportUpdateWithWhereUniqueWithoutTransportCollectionInput {
  data: TransportUpdateWithoutTransportCollectionInput!
  where: TransportWhereUniqueInput!
}

input TransportUpdateWithoutCreatedUserInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isAllow: BoolFieldUpdateOperationsInput
  method: EnumTransportTypeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  transportCollection: TransportCollectionUpdateOneWithoutTransportNestedInput
  url: StringFieldUpdateOperationsInput
}

input TransportUpdateWithoutTransportCollectionInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdUser: UserUpdateOneRequiredWithoutTransportsNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isAllow: BoolFieldUpdateOperationsInput
  method: EnumTransportTypeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input TransportUpsertWithWhereUniqueWithoutCreatedUserInput {
  create: TransportCreateWithoutCreatedUserInput!
  update: TransportUpdateWithoutCreatedUserInput!
  where: TransportWhereUniqueInput!
}

input TransportUpsertWithWhereUniqueWithoutTransportCollectionInput {
  create: TransportCreateWithoutTransportCollectionInput!
  update: TransportUpdateWithoutTransportCollectionInput!
  where: TransportWhereUniqueInput!
}

type TransportVersion {
  createdAt: DateTime
  createdUser: User!
  createdUserId: String!
  id: String!
  transport: JSON
  version: DateTime
}

type TransportVersionCountAggregate {
  _all: Int!
  createdAt: Int!
  createdUserId: Int!
  id: Int!
  transport: Int!
  version: Int!
}

input TransportVersionCreateManyCreatedUserInput {
  createdAt: DateTime
  id: String
  transport: JSON
  version: DateTime
}

input TransportVersionCreateManyCreatedUserInputEnvelope {
  data: [TransportVersionCreateManyCreatedUserInput!]!
  skipDuplicates: Boolean
}

input TransportVersionCreateNestedManyWithoutCreatedUserInput {
  connect: [TransportVersionWhereUniqueInput!]
  connectOrCreate: [TransportVersionCreateOrConnectWithoutCreatedUserInput!]
  create: [TransportVersionCreateWithoutCreatedUserInput!]
  createMany: TransportVersionCreateManyCreatedUserInputEnvelope
}

input TransportVersionCreateOrConnectWithoutCreatedUserInput {
  create: TransportVersionCreateWithoutCreatedUserInput!
  where: TransportVersionWhereUniqueInput!
}

input TransportVersionCreateWithoutCreatedUserInput {
  createdAt: DateTime
  id: String
  transport: JSON
  version: DateTime
}

input TransportVersionListRelationFilter {
  every: TransportVersionWhereInput
  none: TransportVersionWhereInput
  some: TransportVersionWhereInput
}

type TransportVersionMaxAggregate {
  createdAt: DateTime
  createdUserId: String
  id: String
  version: DateTime
}

type TransportVersionMinAggregate {
  createdAt: DateTime
  createdUserId: String
  id: String
  version: DateTime
}

input TransportVersionOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransportVersionScalarWhereInput {
  AND: [TransportVersionScalarWhereInput!]
  NOT: [TransportVersionScalarWhereInput!]
  OR: [TransportVersionScalarWhereInput!]
  createdAt: DateTimeNullableFilter
  createdUserId: StringFilter
  id: StringFilter
  transport: JsonNullableFilter
  version: DateTimeNullableFilter
}

input TransportVersionUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  transport: JSON
  version: NullableDateTimeFieldUpdateOperationsInput
}

input TransportVersionUpdateManyWithWhereWithoutCreatedUserInput {
  data: TransportVersionUpdateManyMutationInput!
  where: TransportVersionScalarWhereInput!
}

input TransportVersionUpdateManyWithoutCreatedUserNestedInput {
  connect: [TransportVersionWhereUniqueInput!]
  connectOrCreate: [TransportVersionCreateOrConnectWithoutCreatedUserInput!]
  create: [TransportVersionCreateWithoutCreatedUserInput!]
  createMany: TransportVersionCreateManyCreatedUserInputEnvelope
  delete: [TransportVersionWhereUniqueInput!]
  deleteMany: [TransportVersionScalarWhereInput!]
  disconnect: [TransportVersionWhereUniqueInput!]
  set: [TransportVersionWhereUniqueInput!]
  update: [TransportVersionUpdateWithWhereUniqueWithoutCreatedUserInput!]
  updateMany: [TransportVersionUpdateManyWithWhereWithoutCreatedUserInput!]
  upsert: [TransportVersionUpsertWithWhereUniqueWithoutCreatedUserInput!]
}

input TransportVersionUpdateWithWhereUniqueWithoutCreatedUserInput {
  data: TransportVersionUpdateWithoutCreatedUserInput!
  where: TransportVersionWhereUniqueInput!
}

input TransportVersionUpdateWithoutCreatedUserInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  transport: JSON
  version: NullableDateTimeFieldUpdateOperationsInput
}

input TransportVersionUpsertWithWhereUniqueWithoutCreatedUserInput {
  create: TransportVersionCreateWithoutCreatedUserInput!
  update: TransportVersionUpdateWithoutCreatedUserInput!
  where: TransportVersionWhereUniqueInput!
}

input TransportVersionWhereInput {
  AND: [TransportVersionWhereInput!]
  NOT: [TransportVersionWhereInput!]
  OR: [TransportVersionWhereInput!]
  createdAt: DateTimeNullableFilter
  createdUser: UserRelationFilter
  createdUserId: StringFilter
  id: StringFilter
  transport: JsonNullableFilter
  version: DateTimeNullableFilter
}

input TransportVersionWhereUniqueInput {
  AND: [TransportVersionWhereInput!]
  NOT: [TransportVersionWhereInput!]
  OR: [TransportVersionWhereInput!]
  createdAt: DateTimeNullableFilter
  createdUser: UserRelationFilter
  createdUserId: StringFilter
  id: String
  transport: JsonNullableFilter
  version: DateTimeNullableFilter
}

input TransportWhereInput {
  AND: [TransportWhereInput!]
  NOT: [TransportWhereInput!]
  OR: [TransportWhereInput!]
  archiveAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  createdUser: UserRelationFilter
  createdUserId: StringFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  id: StringFilter
  isAllow: BoolFilter
  method: EnumTransportTypeFilter
  name: StringFilter
  transportCollection: TransportCollectionNullableRelationFilter
  transportCollectionId: StringNullableFilter
  url: StringFilter
}

input TransportWhereUniqueInput {
  AND: [TransportWhereInput!]
  NOT: [TransportWhereInput!]
  OR: [TransportWhereInput!]
  archiveAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  createdUser: UserRelationFilter
  createdUserId: StringFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  id: String
  isAllow: BoolFilter
  method: EnumTransportTypeFilter
  name: StringFilter
  transportCollection: TransportCollectionNullableRelationFilter
  transportCollectionId: StringNullableFilter
  url: StringFilter
}

type User {
  _count: UserCount!
  config: UserConfig
  createdAt: DateTime
  email: EmailAddress!
  id: String!
  profile: Profile
  role: [UserRole!]
  transports: [Transport!]
  transportsCollection: [TransportCollection!]
  transportsVersions: [TransportVersion!]
  type: UserType!
}

type UserConfig {
  id: String!
  showCompleted: Boolean!
  theme: ThemeColor
  user: User!
  userId: String!
}

type UserConfigCountAggregate {
  _all: Int!
  id: Int!
  showCompleted: Int!
  theme: Int!
  userId: Int!
}

input UserConfigCreateInput {
  showCompleted: Boolean
  theme: ThemeColor
  user: UserCreateNestedOneWithoutConfigInput!
}

input UserConfigCreateNestedOneWithoutUserInput {
  connect: UserConfigWhereUniqueInput
  connectOrCreate: UserConfigCreateOrConnectWithoutUserInput
  create: UserConfigCreateWithoutUserInput
}

input UserConfigCreateOrConnectWithoutUserInput {
  create: UserConfigCreateWithoutUserInput!
  where: UserConfigWhereUniqueInput!
}

input UserConfigCreateWithoutUserInput {
  showCompleted: Boolean
  theme: ThemeColor
}

type UserConfigMaxAggregate {
  id: String
  showCompleted: Boolean
  theme: ThemeColor
  userId: String
}

type UserConfigMinAggregate {
  id: String
  showCompleted: Boolean
  theme: ThemeColor
  userId: String
}

input UserConfigNullableRelationFilter {
  is: UserConfigWhereInput
  isNot: UserConfigWhereInput
}

enum UserConfigOrderByRelevanceFieldEnum {
  id
  userId
}

input UserConfigOrderByRelevanceInput {
  fields: [UserConfigOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserConfigOrderByWithRelationInput {
  _relevance: UserConfigOrderByRelevanceInput
  id: SortOrder
  showCompleted: SortOrder
  theme: SortOrderInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserConfigUpdateInput {
  showCompleted: BoolFieldUpdateOperationsInput
  theme: NullableEnumThemeColorFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutConfigNestedInput
}

input UserConfigUpdateOneWithoutUserNestedInput {
  connect: UserConfigWhereUniqueInput
  connectOrCreate: UserConfigCreateOrConnectWithoutUserInput
  create: UserConfigCreateWithoutUserInput
  delete: UserConfigWhereInput
  disconnect: UserConfigWhereInput
  update: UserConfigUpdateToOneWithWhereWithoutUserInput
  upsert: UserConfigUpsertWithoutUserInput
}

input UserConfigUpdateToOneWithWhereWithoutUserInput {
  data: UserConfigUpdateWithoutUserInput!
  where: UserConfigWhereInput
}

input UserConfigUpdateWithoutUserInput {
  showCompleted: BoolFieldUpdateOperationsInput
  theme: NullableEnumThemeColorFieldUpdateOperationsInput
}

input UserConfigUpsertWithoutUserInput {
  create: UserConfigCreateWithoutUserInput!
  update: UserConfigUpdateWithoutUserInput!
  where: UserConfigWhereInput
}

input UserConfigWhereInput {
  AND: [UserConfigWhereInput!]
  NOT: [UserConfigWhereInput!]
  OR: [UserConfigWhereInput!]
  id: StringFilter
  showCompleted: BoolFilter
  theme: EnumThemeColorNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UserConfigWhereUniqueInput {
  AND: [UserConfigWhereInput!]
  NOT: [UserConfigWhereInput!]
  OR: [UserConfigWhereInput!]
  id: String
  showCompleted: BoolFilter
  theme: EnumThemeColorNullableFilter
  user: UserRelationFilter
  userId: String
}

type UserCount {
  refreshTokens: Int!
  transports: Int!
  transportsCollection: Int!
  transportsVersions: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  role: Int!
  type: Int!
}

input UserCreateInput {
  config: UserConfigCreateNestedOneWithoutUserInput
  createdAt: DateTime
  email: EmailAddress!
  password: PasswordCreateNestedOneWithoutUserInput!
  profile: ProfileCreateNestedOneWithoutUserInput
  role: UserCreateroleInput
  transports: TransportCreateNestedManyWithoutCreatedUserInput
  transportsCollection: TransportCollectionCreateNestedManyWithoutCreatedUserInput
  transportsVersions: TransportVersionCreateNestedManyWithoutCreatedUserInput
  type: UserType
}

input UserCreateNestedOneWithoutConfigInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutConfigInput
  create: UserCreateWithoutConfigInput
}

input UserCreateNestedOneWithoutTransportsCollectionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransportsCollectionInput
  create: UserCreateWithoutTransportsCollectionInput
}

input UserCreateNestedOneWithoutTransportsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransportsInput
  create: UserCreateWithoutTransportsInput
}

input UserCreateOrConnectWithoutConfigInput {
  create: UserCreateWithoutConfigInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTransportsCollectionInput {
  create: UserCreateWithoutTransportsCollectionInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTransportsInput {
  create: UserCreateWithoutTransportsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutConfigInput {
  createdAt: DateTime
  email: EmailAddress!
  password: PasswordCreateNestedOneWithoutUserInput!
  profile: ProfileCreateNestedOneWithoutUserInput
  role: UserCreateroleInput
  transports: TransportCreateNestedManyWithoutCreatedUserInput
  transportsCollection: TransportCollectionCreateNestedManyWithoutCreatedUserInput
  transportsVersions: TransportVersionCreateNestedManyWithoutCreatedUserInput
  type: UserType
}

input UserCreateWithoutTransportsCollectionInput {
  config: UserConfigCreateNestedOneWithoutUserInput
  createdAt: DateTime
  email: EmailAddress!
  password: PasswordCreateNestedOneWithoutUserInput!
  profile: ProfileCreateNestedOneWithoutUserInput
  role: UserCreateroleInput
  transports: TransportCreateNestedManyWithoutCreatedUserInput
  transportsVersions: TransportVersionCreateNestedManyWithoutCreatedUserInput
  type: UserType
}

input UserCreateWithoutTransportsInput {
  config: UserConfigCreateNestedOneWithoutUserInput
  createdAt: DateTime
  email: EmailAddress!
  password: PasswordCreateNestedOneWithoutUserInput!
  profile: ProfileCreateNestedOneWithoutUserInput
  role: UserCreateroleInput
  transportsCollection: TransportCollectionCreateNestedManyWithoutCreatedUserInput
  transportsVersions: TransportVersionCreateNestedManyWithoutCreatedUserInput
  type: UserType
}

input UserCreateroleInput {
  set: [UserRole!]!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: EmailAddress
  id: String
  type: UserType
}

type UserMinAggregate {
  createdAt: DateTime
  email: EmailAddress
  id: String
  type: UserType
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserOrderByRelevanceFieldEnum {
  email
  id
  passwordId
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserOrderByWithRelationInput {
  _relevance: UserOrderByRelevanceInput
  config: UserConfigOrderByWithRelationInput
  createdAt: SortOrderInput
  email: SortOrder
  id: SortOrder
  password: PasswordOrderByWithRelationInput
  passwordId: SortOrder
  profile: ProfileOrderByWithRelationInput
  role: SortOrder
  transports: TransportOrderByRelationAggregateInput
  transportsCollection: TransportCollectionOrderByRelationAggregateInput
  transportsVersions: TransportVersionOrderByRelationAggregateInput
  type: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserRole {
  ROLE_ADMIN
  ROLE_DEVELOPER
  ROLE_GUEST
  ROLE_USER
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  passwordId
  role
  type
}

enum UserType {
  ADMIN
  GUEST
  USER
}

input UserUpdateInput {
  config: UserConfigUpdateOneWithoutUserNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: PasswordUpdateOneRequiredWithoutUserNestedInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  role: UserUpdateroleInput
  transports: TransportUpdateManyWithoutCreatedUserNestedInput
  transportsCollection: TransportCollectionUpdateManyWithoutCreatedUserNestedInput
  transportsVersions: TransportVersionUpdateManyWithoutCreatedUserNestedInput
  type: EnumUserTypeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutConfigNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutConfigInput
  create: UserCreateWithoutConfigInput
  update: UserUpdateToOneWithWhereWithoutConfigInput
  upsert: UserUpsertWithoutConfigInput
}

input UserUpdateOneRequiredWithoutTransportsCollectionNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransportsCollectionInput
  create: UserCreateWithoutTransportsCollectionInput
  update: UserUpdateToOneWithWhereWithoutTransportsCollectionInput
  upsert: UserUpsertWithoutTransportsCollectionInput
}

input UserUpdateOneRequiredWithoutTransportsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransportsInput
  create: UserCreateWithoutTransportsInput
  update: UserUpdateToOneWithWhereWithoutTransportsInput
  upsert: UserUpsertWithoutTransportsInput
}

input UserUpdateToOneWithWhereWithoutConfigInput {
  data: UserUpdateWithoutConfigInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutTransportsCollectionInput {
  data: UserUpdateWithoutTransportsCollectionInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutTransportsInput {
  data: UserUpdateWithoutTransportsInput!
  where: UserWhereInput
}

input UserUpdateWithoutConfigInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: PasswordUpdateOneRequiredWithoutUserNestedInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  role: UserUpdateroleInput
  transports: TransportUpdateManyWithoutCreatedUserNestedInput
  transportsCollection: TransportCollectionUpdateManyWithoutCreatedUserNestedInput
  transportsVersions: TransportVersionUpdateManyWithoutCreatedUserNestedInput
  type: EnumUserTypeFieldUpdateOperationsInput
}

input UserUpdateWithoutTransportsCollectionInput {
  config: UserConfigUpdateOneWithoutUserNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: PasswordUpdateOneRequiredWithoutUserNestedInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  role: UserUpdateroleInput
  transports: TransportUpdateManyWithoutCreatedUserNestedInput
  transportsVersions: TransportVersionUpdateManyWithoutCreatedUserNestedInput
  type: EnumUserTypeFieldUpdateOperationsInput
}

input UserUpdateWithoutTransportsInput {
  config: UserConfigUpdateOneWithoutUserNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: PasswordUpdateOneRequiredWithoutUserNestedInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  role: UserUpdateroleInput
  transportsCollection: TransportCollectionUpdateManyWithoutCreatedUserNestedInput
  transportsVersions: TransportVersionUpdateManyWithoutCreatedUserNestedInput
  type: EnumUserTypeFieldUpdateOperationsInput
}

input UserUpdateroleInput {
  push: [UserRole!]
  set: [UserRole!]
}

input UserUpsertWithoutConfigInput {
  create: UserCreateWithoutConfigInput!
  update: UserUpdateWithoutConfigInput!
  where: UserWhereInput
}

input UserUpsertWithoutTransportsCollectionInput {
  create: UserCreateWithoutTransportsCollectionInput!
  update: UserUpdateWithoutTransportsCollectionInput!
  where: UserWhereInput
}

input UserUpsertWithoutTransportsInput {
  create: UserCreateWithoutTransportsInput!
  update: UserUpdateWithoutTransportsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  config: UserConfigNullableRelationFilter
  createdAt: DateTimeNullableFilter
  email: StringFilter
  id: StringFilter
  profile: ProfileNullableRelationFilter
  role: EnumUserRoleNullableListFilter
  transports: TransportListRelationFilter
  transportsCollection: TransportCollectionListRelationFilter
  transportsVersions: TransportVersionListRelationFilter
  type: EnumUserTypeFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  config: UserConfigNullableRelationFilter
  createdAt: DateTimeNullableFilter
  email: EmailAddress
  id: String
  profile: ProfileNullableRelationFilter
  role: EnumUserRoleNullableListFilter
  transports: TransportListRelationFilter
  transportsCollection: TransportCollectionListRelationFilter
  transportsVersions: TransportVersionListRelationFilter
  type: EnumUserTypeFilter
}